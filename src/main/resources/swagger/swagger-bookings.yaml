swagger: '2.0'
info:
  version: 0.0.1
  title: API Bookings
  description: 'Hackathon'
  contact:
    name: Alisson da Cruz Souza
    email: alissoncruz.si@gmail.com
host: dnamobile.com.br
basePath: /booking/v1/
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /business:
    post:
      tags:
        - Business
      summary: Create a business
      description: 'post a business'
      operationId: createBusiness
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: Office
          in: body
          description: office object
          required: true
          schema:
            $ref: '#/definitions/Business'
      responses:
        '201':
          description: Create new resource
          schema:
            $ref: '#/definitions/BusinessResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

    get:
      tags:
        - Business
      summary: Gets all businesses
      description: 'get a office'
      operationId: getBusiness
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BusinessesResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /business/{id}:
    get:
      tags:
        - Business
      summary: Get business
      description: 'get a office'
      operationId: getBusinessById
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of workstation
          required: true
          type: string
          x-example: '000001'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BusinessResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      tags:
        - Business
      summary: Delete business
      description: 'delete a business'
      operationId: deleteBusiness
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of workstation
          required: true
          type: string
          x-example: '000001'
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /workstation:
    post:
      tags:
        - Workstation
      summary: Create new workstation
      description: 'Create new workstation.'
      operationId: createWorkstation
      produces:
        - application/json
      parameters:
        - in: body
          name: newWorkstation
          description: data of the new workstation
          required: true
          schema:
            $ref: '#/definitions/Workstation'

      responses:
        '201':
          description: Create new resource
          schema:
            $ref: '#/definitions/WorkstationCode'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
        - OauthSecurity:
            - "bearer"
    get:
      tags:
        - Workstation
      summary: Gets all workstation
      description: 'get a workstation'
      operationId: getWorkstation
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/WorkstationsResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'




  /workstation/{id}:
    get:
      tags:
        - Workstation
      summary: Gets a workstation
      description: 'get a workstation'
      operationId: getWorkstationById
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of workstation
          required: true
          type: string
          x-example: '000001'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Workstation'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'



  /workstation/{id}/blocked:
    patch:
      tags:
        - Workstation
      summary: Patch a workstation
      description: 'get a workstation'
      operationId: blockedWorkstation
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of workstation
          required: true
          type: string
          x-example: '000001'
      responses:
        '204':
          description: Ok
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /workstation/{id}/unblocked:
    patch:
      tags:
        - Workstation
      summary: Patch a workstation
      description: 'get a workstation'
      operationId: unblockedWorkstation
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of workstation
          required: true
          type: string
          x-example: '000001'
      responses:
        '204':
          description: Ok
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /booking:
    post:
      tags:
        - Bookings
      summary: Create a or a lot bookings
      description: 'put a user'
      operationId: createBookings
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: Booking
          in: body
          description: Booking object
          required: true
          schema:
            $ref: '#/definitions/Bookings'
      responses:
        '201':
          description: Create new resource
          schema:
            $ref: '#/definitions/BookingResponse'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /booking/{id}:
    get:
      tags:
        - Bookings
      summary: Gets a booking
      description: 'get a booking'
      operationId: getBookingsById
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of booking
          required: true
          type: string
          x-example: '000001'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BookingResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'
    put:
      tags:
        - Bookings
      summary: Update a booking
      description: 'put a user'
      operationId: updateBooking
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: booking
          required: true
          type: string
          x-example: 'XPTO'
        - name: Booking
          in: body
          description: Booking object
          required: true
          schema:
            $ref: '#/definitions/Booking'
      responses:
        '204':
          description: No Content

        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /booking/{idUser}/user:
    get:
      tags:
        - Bookings
      summary: Gets Bookings of the User
      description: 'Get bookings of the User'
      operationId: getBookingsByIdUser
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: idUser
          in: path
          description: Code of booking
          required: true
          type: string
          x-example: '000001'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/BookingsResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'


  /booking/{id}/checkin:
    patch:
      tags:
        - Bookings
      summary: Update a user
      description: 'put a user'
      operationId: createCheckin
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: booking
          required: true
          type: string
          x-example: 'XPTO'
        - name: Booking
          in: body
          description: data of the Booking
          required: true
          schema:
            $ref: '#/definitions/CheckinCheckout'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /booking/{id}/checkout:
    patch:
      tags:
        - Bookings
      summary: Update a user
      description: 'put a user'
      operationId: createCheckout
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of the Booking
          required: true
          type: string
          x-example: 'XPTO'
        - name: Booking
          in: body
          description: data of the Booking
          required: true
          schema:
            $ref: '#/definitions/CheckinCheckout'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'





  /user:
    post:
      tags:
        - User
      summary: Create new user
      description: 'Create new user.'
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: newUser
          description: data of the new User
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:

        '201':
          description: Create new resource
          schema:
            $ref: '#/definitions/UserCode'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
      security:
        - OauthSecurity:
            - "bearer"
    get:
      tags:
        - User
      summary: Gets all users
      description: 'get a user'
      operationId: getUsers
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/UsersResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /user/{id}:
    get:
      tags:
        - User
      summary: Gets a user
      description: 'get a user'
      operationId: getUser
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of user
          required: true
          type: string
          x-example: '000001'
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      tags:
        - User
      summary: Update a user
      description: 'put a user'
      operationId: updateUser
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of the user
          required: true
          type: string
          x-example: 'XPTO'
        - name: User
          in: body
          description: data of the User
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '401':
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '422':
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      tags:
        - User
      summary: Gets a user
      description: 'get a user'
      operationId: deleteUser
      produces:
        - application/json
      security:
        - OauthSecurity:
            - bearer
      parameters:
        - name: id
          in: path
          description: Code of user
          required: true
          type: string
          x-example: '000001'
      responses:
        '204':
          description: No Content
        '401':
          description: Authorization Failed
          schema:
            $ref: '#/definitions/ErrorModel'
        '404':
          description: Document not found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/ErrorModel'

securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://sandbox-api.exemple.com.br/security/iam/v1/user-identities/login'
    tokenUrl: 'https://sandbox-api.exemple.com.br/security/iam/v1/user-identities/login'
    scopes:
      bearer: Client authorization token - Bearer JWT
security:
  - OauthSecurity:
      - bearer

definitions:

  Business:
    description: Office
    type: object
    properties:
      id:
        type: string
        example: 0001
        description: Unique identifier of the Office
      name:
        type: string
        example: Escritorio Sorocaba
        description: Name
      address:
        type: string
        example: Sorocaba
        description: Endereco
      status:
        type: string
        example: ACTIVE
        enum: [ACTIVE, INACTIVE]

  BusinessResponse:
    description: Office
    type: object
    properties:
      id:
        type: string
        example: 0001
        description: Unique identifier of the Office
      name:
        type: string
        example: Escritorio Sorocaba
        description: Name
      address:
        type: string
        example: Sorocaba
        description: Endereco
      createdDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
      status:
        type: string
        example: ACTIVE
        enum: [ACTIVE, INACTIVE]

  BusinessesResponse:
    type: object
    required:
      - office
    properties:
      offices:
        type: array
        items:
          $ref: '#/definitions/BusinessResponse'

  User:
    description: Object User
    type: object
    required:
      - name
    properties:
      name:
        type: string
        example: string
        description: Name of User
      user:
        type: string
        example: andu
        description: Unique identifier of the User
      email:
        type: string
        example: string
        description: Email
      status:
        type: string
        enum: [ACTIVE, INACTIVE]
      type:
        type: string
        example: ADMIN
        description: ADMIN | CLIENT
        enum: [ADMIN, CLIENT]

  UsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/UserResponse'

  UserResponse:
    description: Object User
    type: object
    required:
      - name
    properties:
      id:
        type: string
        example: 001
      name:
        type: string
        example: string
        description: Name of product
      user:
        type: string
        example: andu
        description: Unique identifier of the User
      email:
        type: string
        example: string
        description: Name of product
      createdDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
      updateDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
      status:
        type: string
        enum: [ativo, inativo]
      type:
        type: string
        example: Tipo de usuario
        description: Admin | Cliente
        enum: [admin, cliente]

  UpdateUser:
    description: Object Product
    type: object
    required:
      - name
      - description
    properties:
      name:
        type: string
        example: string
        description: Name of product
      user:
        type: string
        example: andu
        description: Unique identifier of the User
      email:
        type: string
        example: string
        description: Name of product
      createdDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Start Date of the validity of the product.
      status:
        type: string
        enum: [ativo, inativo]
      type:
        type: string
        example: Tipo de usuario
        description: Admin | Cliente
        enum: [admin, cliente]

  Workstation:
    description: Workstation
    type: object
    required:
      - name
    properties:
      id:
        type: string
        example: 001
        description: Name of Workstation
      idOffice:
        type: string
      name:
        type: string
        example: string
        description: Name of Workstation
      description:
        type: string
        example: Fica perto do banheiro
        description: Name of Workstation
      createdDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Start Date of the validity of the workstation.
      group:
        type: string
        example: Bloco-X22
      status:
        type: string
        enum: [ACTIVE, INACTIVE]
      blocked:
        type: string
        enum: [YES, NO]
      typeWorkstation:
        type: string
        enum: [DESKTOP, DOCK_STATION, PERIFERICOS]

  WorkstationsResponse:
    type: object
    properties:
      workstations:
        type: array
        items:
          $ref: '#/definitions/Workstation'

  WorkstationCode:
    description: Workstation data
    type: object
    required:
      - id
    properties:
      id:
        type: string
        example: 001
        description: Unique identifier of the Workstation

  Booking:
    description: Booking
    type: object
    required:
      - idUser
      - idWorkstation
    properties:
      idUser:
        type: string
        example: 001
        description: Id of the User
      idWorkstation:
        type: string
        example: 001
        description: Id of the Workstation
      idOffice:
        type: string
        example: 001
        description: Id of the Office
      bookingDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Start Date of the validity of the Booking.
      checkinDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Data do checkIn.
      checkoutDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Data do checkOut.
      sizeHours:
        type: string
        format: int
        example: 4
        description: Hours.
      startedTime:
        type: string
        example: '10:00'
        description: Hours.
      finishedTime:
        type: string
        example: '12:00'
        description: Hours.
      qrCode:
        type: string
        example: '12:00'
        description: Hours.
      status:
        type: string
        enum: [ACTIVE, INACTIVE, CANCELED, FINISHED, IN_USE, RESERVED, BLOCKED]

  Bookings:
    type: object
    properties:
      bookings:
        type: array
        items:
          $ref: '#/definitions/Booking'

  BookingResponse:
    description: Booking
    type: object
    properties:
      id:
        type: string
        example: 123
        description: Id of the Booking
      idUser:
        type: string
        example: string
        description: Id of the User
      idWorkstation:
        type: string
        example: string
        description: Id of the Workstation
      idOffice:
        type: string
        example: andu
        description: Id of the Office
      bookingDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Start Date of the validity of the Booking.
      checkinDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Data do checkIn.
      checkoutDate:
        type: string
        format: date-time
        example: yyyy-mm-dd
        description: Data do checkOut.
      startedDatetime:
        type: string
        example: '09:00'
        description: Data do checkOut.
      finishedDatetime:
        type: string
        example: '12:00'
        description: Data do checkOut.
      sizeHours:
        type: string
        format: int64
        example: 4
        description: Start Date of the validity of the Booking.
      codeBar:
        type: string
        example: 123456
      status:
        type: string
        enum: [ACTIVE, INACTIVE, CANCELED, FINISHED, IN_USE, RESERVED, BLOCKED, OTHERS]

  BookingsResponse:
    type: object
    properties:
      bookings:
        type: array
        items:
          $ref: '#/definitions/BookingResponse'

  CheckinCheckout:
    description: Checkin
    type: object
    required:
      - id
    properties:
      qrCode:
        type: string
        example: 001
        description: QR Code

  UserCode:
    description: User id
    type: object
    required:
      - id
    properties:
      id:
        type: string
        example: 001
        description: Unique identifier of the User

  ErrorModel:
    type: object
    required:
      - codeBuilderComplete
      - message
    properties:
      code:
        type: string
      message:
        type: string